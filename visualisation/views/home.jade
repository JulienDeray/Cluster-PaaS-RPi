html
  head
    title=title
    link(href='//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css', rel='stylesheet')
  body
    div.container
      div.jumbotron
        h1 Cluster informations

      h2#alone.hidden.alert #{ip} is the only node connected at this moment !

      table.table.table-striped
        thead
            tr
                th IP
                th Port
                th Name
                th Monitoring
                th Suspicion level
        tbody#nodes

    script(src='/socket.io/socket.io.js')
    script(src='http://code.jquery.com/jquery-2.1.4.min.js')
    script(src='https://www.google.com/jsapi')
    script(type='text/javascript').
        var socket = io.connect("#{ip}:8080");

        google.load("visualization", "1", {packages:["gauge"]});

        function updatePeerInfos(peerInfos) {
            var state;
            if (peerInfos.ip == '#{ip}') {
                state = stateLabel(true, "Self");
            }
            else {
                state = stateLabel(peerInfos.state, 'Unknown');
            }

            var $peer_tr = $('#' + peerInfos.name);
            if ( $peer_tr.length > 0 ) {
                $peer_tr.find('.ip').first().html(peerInfos.ip);
                $peer_tr.find('.port').first().html(peerInfos.port);
                $peer_tr.find('.name').first().html(peerInfos.name);
                $peer_tr.find('.state').first().html(state);
            }
            else {
                $('#nodes').append(
                        '<tr id="' + peerInfos.name + '">' +
                        '<td class="ip">' + peerInfos.ip + '</td>' +
                        '<td class="port">' + peerInfos.port + '</td>' +
                        '<td class="name">' + peerInfos.name + '</td>' +
                        '<td class="monitoring"><div id="chart_div_' + peerInfos.name + '" style="width: 400px; height: 120px;"></div></td>' +
                        '<td class="state">' + state + '</td>' +
                        '</tr>'
                );
                google.setOnLoadCallback(generateChartCallback(peerInfos.name));
            }
        }

        function stateLabel(state, suspicionLevel) {
            if (state) {
                return '<span class="label label-success">' + suspicionLevel + '</span>';
            }
            else {
                return '<span class="label label-danger">' + suspicionLevel + '</span>';
            }
        }

        function changePeerState(peerName, state, suspicionLevel) {
            var $peer_tr = $('#' + peerName);
            $peer_tr.find('.state').first().html(stateLabel(state, suspicionLevel));
        }

        function computeSuspicionLevel(peerObj) {
            const ratio = (peerObj.phi / peerObj.threshold) * 100;
            return ratio.toFixed(0);
        }

        // monitoring
        var peers = [];
        function generateChartCallback(peerName) {
            peers.push(peerName);
            return function() {
                var options = {
                    width: 400, height: 120,
                    redFrom: 90, redTo: 100,
                    yellowFrom:75, yellowTo: 90,
                    minorTicks: 5
                };

                var charts = [];
                var data = [];
                peers.forEach(function(peerName) {
                    data[peerName] = google.visualization.arrayToDataTable([
                        ['Label', 'Value'],
                        ['Memory', 0],
                        ['CPUs', 1]
                    ]);

                    charts[peerName] = new google.visualization.Gauge(document.getElementById('chart_div_' + peerName));
                    charts[peerName].draw(data[peerName], options);

                    socket.on('monitoring_' + peerName, function(monitoring) {
                        data[peerName].setValue(0, 1, (((monitoring.totalmem - monitoring.freemem) / monitoring.totalmem) * 100).toFixed(0));
                        data[peerName].setValue(1, 1, (monitoring.cpus * 100).toFixed(0));

                        charts[peerName].draw(data[peerName], options);
                    });
                });
            };
        }

        // cluster infos
        socket.on('new_peer', function(peerInfos) {
            updatePeerInfos(peerInfos);
        });

        socket.on('update', function(peerInfos) {
            updatePeerInfos(peerInfos);
        });

        socket.on('peer_failed', function(peerObj) {
            var suspicionLevel = computeSuspicionLevel(peerObj) + '%';
            changePeerState(peerObj.name, false, suspicionLevel);
        });

        socket.on('peer_alive', function (peerObj) {
            var suspicionLevel = computeSuspicionLevel(peerObj) + '%';
            changePeerState(peerObj.name, true, suspicionLevel);
        });

        socket.on('alone', function(isAlone) {
            if (isAlone) {
                $('#alone').removeClass('hidden').addClass('show');
            }
            else {
                $('#alone').removeClass('show').addClass('hidden');
            }
        });