#!/usr/bin/env node

/**
 * Generates an Ansible's hosts file (usually found in /etc/ansible/) from the temp file generated by generate_host_from_playbook.sh
 */

var fs = require('fs');

const opts = require("nomnom")
    .script("generate_hotsts_from_arrangement")
    .options({
        hosts_arrangement: {
            position: 0,
            required: true,
            help: "Temp file generated by generate_host_from_playbook.sh"
        }
    }).parse();

var lineNumber = 0;
var hostsFileStructure;

/**
 * Translates the two-line file given in argument to the script into an object.
 */
var input = fs.createReadStream(__dirname + '/' + opts.hosts_arrangement);
readLines(input, function(line) {
    lineNumber++;
    switch (lineNumber) {
        case 1:
            hostsFileStructure = line.split(';');
            hostsFileStructure.pop();
            hostsFileStructure = hostsFileStructure.map(function(group) {
                return {group: group, hosts: []};
            });
            break;
        case 2:
            var hosts = line.split(';');
            hosts.pop();
            hosts.forEach(function(host) {
                var splitted = host.split('=');
                hostsFileStructure[splitted[1]].hosts.push(splitted[0]);
            });

            var outputFile = generateHostsFileContent();
            createHostFile(outputFile);

            break;
        default :
            console.log('\n\n[error] malformed input file');
    }
});

/*
    Functions
 */

/**
 * Creates the "hosts" file that can be used by Ansible.
 * @param {string} outputFile
 */
function createHostFile(outputFile) {
    var fs = require('fs');
    fs.writeFile(__dirname + "/../hosts", outputFile, function (err) {
        if (err) {
            return console.log(err);
        }

        console.log("\n\nThe file was saved!");
    });
}

/**
 * Generates a well formed string from the file given in argument to the script.
 * @returns {string} outputFile
 */
function generateHostsFileContent() {
    var outputFile = "";
    hostsFileStructure.forEach(function (groupObj) {
        outputFile += "[" + groupObj.group + "]\n";
        groupObj.hosts.forEach(function (host) {
            outputFile += host + "\n";
        });
        outputFile += "\n";
    });
    return outputFile;
}

/**
 * Reads the file given in argument to the script.
 * @param input
 * @param func
 */
function readLines(input, func) {
    var remaining = '';

    input.on('data', function(data) {
        remaining += data;
        var index = remaining.indexOf('\n');
        var last  = 0;
        while (index > -1) {
            var line = remaining.substring(last, index);
            last = index + 1;
            func(line);
            index = remaining.indexOf('\n', last);
        }

        remaining = remaining.substring(last);
    });

    input.on('end', function() {
        if (remaining.length > 0) {
            func(remaining);
        }
    });
}